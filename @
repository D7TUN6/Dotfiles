{ config, lib, pkgs, inputs, ... }:

{

  imports = [
    ./hardware-configuration.nix
    inputs.home-manager.nixosModules.default
  ];

  system = {
    stateVersion = "24.11";
  };

  boot = {
    kernelPackages = pkgs.linuxPackages-rt_latest;
    kernelModules = [
      "xt_multiport"
    ];
    loader = {
      systemd-boot = {
        enable = true;
      };
      efi = {
        canTouchEfiVariables = true;
      };
    };
  };
 
  systemd = {
    oomd = {
      enable = true;
    };
    timers = {
      fstrim = {
        enable = true;
      };
    };
    targets = {
      sleep = {
        enable = false;
      };
      suspend = {
        enable = false;
      };
      hibernate = {
       enable = false;
      };
      hybrid-sleep = {
        enable = false;
      };
    };
  };

  networking = {
    hostName = "Workstation1";
    nameservers = [
      "1.1.1.1"
      "1.0.0.1"
      "8.8.8.8"
      "8.8.4.4"
    ];
    networkmanager = {
      enable = true;
    };
    dhcpcd = {
      enable = true;
    };
    firewall = {
      enable = true;
      #allowedTCPPorts = [  ];
    };
  };

  powerManagement = {
    enable = false;
  };

  time = {
    timeZone = "Asia/Yekaterinburg";
  };

  users = {
    users = {
      alex = {
        isNormalUser = true;
	initialPassword = "1590";
	shell = pkgs.fish;
	extraGroups = [
          "wheel"
	  "audio"
	  "video"
	  "storage"
	  "input"
	  "plugdev"
	];
      };
    };
  };

  hardware = {
    cpu = {
      intel = {
        updateMicrocode = true;
      };
    };
    alsa = {
      enable = false;
      enablePersistence = false;
    };
    graphics = {
      enable = true;
    };
    bluetooth = {
      enable = true;
    };
    nvidia = {
      modesetting = {
        enable = true;
      };
      powerManagement = {
        enable = false;
	finegrained = false;
      };
      open = false;
      nvidiaSettings = true;
      package = config.boot.kernelPackages.nvidiaPackages.legacy_470;
    };
  };

  zramSwap = {
    enable = true;
    memoryPercent = 100;
    algorithm = "zstd";
  };

  nix = {
    settings = {
      experimental-features = [
        "nix-command"
	"flakes"
      ];
    };
  };

  nixpkgs = {
    config = {
      allowUnfree = true;
      nvidia = {
        acceptLicense = true;
      };
    };
  };

  services = {
    xserver = {
      enable = true;
      videoDrivers = [
      "nvidia"
      ];
      xkb = {
        layout = "us,ru";
	options = "alt_shift_toggle";
      };
      displayManager = {
        gdm = {
	  wayland = false;
          enable = true;
	};
      };
      desktopManager = {
        gnome = {
          enable = true;
        };
      };
    };
    ananicy = {
      enable = true;
      package = pkgs.ananicy-cpp;
      rulesProvider = pkgs.ananicy-rules-cachyos;
    };
    irqbalance = {
      enable = true;
    };
    pipewire = {
      enable = true;
      alsa = {
        enable = true;
	support32Bit = true;
      };
      pulse = {
        enable = true;
      };
      jack = {
        enable = true;
      };
      wireplumber = {
        enable = true;
      };
    };
    pulseaudio = {
      enable = lib.mkForce false;
    };
    libinput = {
      enable = true;
    };
  };
 
  programs = {
    fish = {
      enable = true;
    };
  };

  home-manager = {
    extraSpecialArgs = { inherit inputs; };
    backupFileExtension = "hm-backup";
    users = {
      "alex" = import ./home.nix;
    }; 
  };


  environment = {
    variables = {
      __GL_THREADED_OPTIMIZATIONS = "1";
      __GL_MaxFramesAllowed = "1";
      __GL_YIELD = "NOTHING";
      __GL_SHADER_DISK_CACHE_SKIP_CLEANUP = "1";
      RADV_PERFTEST = "sam";
      VKD3D_CONFIG = "no_upload_hvv";
      mesa_glthread = "true";
    };
    systemPackages = with pkgs; [
     # System.
     neovim
     wget
     rsync
     btop
     fastfetch
     appimage-run
     
     # Perfomance.
     irqbalance

     # Alsa.
     alsa-lib
     alsa-utils
     alsa-plugins
     apulse
     
     # Drivers & Firmware.
     linux-firmware
     sof-firmware
     alsa-firmware
     mesa
     mesa-demos

     # Sound.
     #Controllers & Mixers
     pavucontrol
     #DAW
     reaper
     lmms
     audacity
     # Audio plugins.
     #Synth
     zynaddsubfx
     surge
     #Rack
     carla
     #Effects
     calf
     
     # Desktop.
     #Xorg
     xorg.libxcvt
     xorg.xkill
     #Screenshot & Capture
     flameshot
     obs-studio
     #Utils
     peazip
     
     # Work & Office
     chromium
     onlyoffice-desktopeditors


     # Multimedia.
     vlc
     handbrake
     ffmpeg-full
     # Development.
     #IDE
     vscode
     #Compilers
     gcc
     #Version control
     git
     #Containerization
     compose2nix
     podman-compose
     dive
     # Graphics & Photo.
     krita
     gimp
     inkscape
     kdePackages.kdenlive
     shotcut
     # Windows apps.
     wine-staging
     wineWowPackages.staging
     winetricks
    ];
  };


}
